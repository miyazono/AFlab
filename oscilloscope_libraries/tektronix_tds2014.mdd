<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>1.0</FileVersion>
   <DriverName>D:\sandbox\matlab\toolbox\instrument\instrument\drivers\tektronix_tds2014.mdd</DriverName>
   <DriverType>MATLAB interface object</DriverType>
   <InstrumentType>Oscilloscope</InstrumentType>
   <InstrumentManufacturer>Tektronix</InstrumentManufacturer>
   <InstrumentModel>TDS2014</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST; HEADER OFF; VERBOSE ON</Reset>
   <Selftest>*TST?</Selftest>
   <Error>*ESR?; ALLEv?</Error>
   <CreateInitCode>
      <Code>function init(obj)
% This method is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% Extract the interface object.
interface = get(obj, 'Interface');

fclose(interface);

% Configure the buffer size to allow for waveform transfer.
set(interface, 'InputBufferSize', 25000);
set(interface, 'OutputBufferSize', 25000);
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This method is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

%get the interface
interface = get(obj, 'interface');

%If HEADER is not OFF or VERBOSE is not ON then responses retrieved from
% the device will not match what is expected, and the driver will not
% function properly.
fprintf(interface, 'HEADER OFF');
fprintf(interface, 'VERBOSE ON');

%Clear the Standard Event Status Register (SESR) to remove possible Power
% on event, which would otherwise be returned by getError.
query(interface, '*ESR?');</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>InstrumentCommand</Type>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Busy</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>BUSY?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Returns 1 if the scope is busy with a previous task.

added by ETM, 2/9/2016</Description>
            </Property>
            <Property>
               <Name>Language</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>LANGuage</ConfigureCommand>
                     <QueryCommand>LANGuage?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="english" Value="ENGL"/>
                     <Enum Name="french" Value="FREN"/>
                     <Enum Name="german" Value="GERM"/>
                     <Enum Name="italian" Value="ITAL"/>
                     <Enum Name="portuguese" Value="PORTU"/>
                     <Enum Name="spanish" Value="SPAN"/>
                     <Enum Name="japanese" Value="JAPA"/>
                     <Enum Name="korean" Value="KORE"/>
                     <Enum Name="traditionalChinese" Value="TRAD"/>
                     <Enum Name="simplifiedChinese" Value="SIMP"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>english</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the language that the oscilloscope uses to display information on the screen.</Description>
            </Property>
            <Property>
               <Name>Math</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>MATH:DEFINE</ConfigureCommand>
                     <QueryCommand>MATH:DEFINE?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="ch1 - ch2" Value="&#34;CH1 - CH2&#34;"/>
                     <Enum Name="ch2 - ch1" Value="&#34;CH2 - CH1&#34;"/>
                     <Enum Name="ch1 + ch2" Value="&#34;CH1 + CH2&#34;"/>
                     <Enum Name="ch3 - ch4" Value="&#34;CH3 - CH4&#34;"/>
                     <Enum Name="ch4 - ch3" Value="&#34;CH4 - CH3&#34;"/>
                     <Enum Name="ch3 + ch4" Value="&#34;CH3 + CH4&#34;"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>ch1 - ch2</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The query form of this command return the definition for the math waveform.</Description>
            </Property>
            <Property>
               <Name>ResponseHeaderState</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>HEADer?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Queries the Response Header Enable State that causes the oscilloscope to either include or omit headers on query responses.

NOTE: Although the property is not truly read only for the instrument, the value must be 'off' for the driver to operate correctly.  As a result, it is set as read-only for the driver.</Description>
            </Property>
            <Property>
               <Name>VerboseEnabled</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>VERBose</ConfigureCommand>
                     <QueryCommand>VERBose?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="off" Value="0"/>
                     <Enum Name="on" Value="1"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Queries the Verbose state that controls the length of keywords on query responses.

Although this property is configurable on the instrument, the driver requires that it always be on so that we receive predictable responses from the instrument.</Description>
            </Property>
            <Property>
               <Name>Wait</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>*WAI</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Returns when the scope is no longer busy with a previous task.

added by ETM, 2/9/2016</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>autoset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="AUTOSet EXECUTE" Output="false"/>
                  </Commands>
               </Code>
               <Description>AUTOSET Automatic parameter adjustment.

INVOKE(OBJ, 'autoset') causes the oscilloscope to adjust its vertical, horizontal, and trigger controls to display a more stable waveform.</Description>
            </Method>
            <Method>
               <Name>factoryreset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="FACtory" Output="false"/>
                     <Line Command="HEADER OFF" Output="false"/>
                  </Commands>
               </Code>
               <Description>FACTORYRESET  Resets the oscilloscope to its factory default settings.

INVOKE(OBJ, 'factoryreset')  resets the oscilloscope to its factory settings.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>acquisition</Name>
         <Description>The aquisition group define properties and function related to how the waveform is acquired and the timebase.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AcquisitionCount</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>ACQuire:NUMACq?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Indicate the number of acquisitions that have taken place since starting oscilloscope acquisition.</Description>
            </Property>
            <Property>
               <Name>Control</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>ACQuire:STOPAfter</ConfigureCommand>
                     <QueryCommand>ACQuire:STOPAfter?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="run-stop" Value="RUNSTOP"/>
                     <Enum Name="single" Value="SEQUENCE"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>run-stop</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Tells the oscilloscope when to stop taking acquisitions for edge trigger type.  If the property value is 'run-stop' then acquisition is controlled by the run/stop button on the oscilloscope.  If the value 'single' then a single acquisition is performed (note that 'single acquisition may include multiple triggers and wavforms depending on other property settings such as NumberOfAverages.</Description>
            </Property>
            <Property>
               <Name>Delay</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>HORizontal:MAIn:POSition</ConfigureCommand>
                     <QueryCommand>HORizontal:MAIn:POSition?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the main time base horizontal position.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>ACQuire:MODe</ConfigureCommand>
                     <QueryCommand>ACQuire:MODe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="sample" Value="SAMPLE"/>
                     <Enum Name="peakDetect" Value="PEAKDETECT"/>
                     <Enum Name="average" Value="AVERAGE"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Sample</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or query the oscilloscope acquisition mode.</Description>
            </Property>
            <Property>
               <Name>NumberOfAverages</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>ACQuire:NUMAVg</ConfigureCommand>
                     <QueryCommand>ACQuire:NUMAVg?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>4.0</Value>
                     <Value>16.0</Value>
                     <Value>64.0</Value>
                     <Value>128.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>4.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the number of oscilloscope waveform acquisitions that make up an averaged waveform.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>ACQ:STATE</ConfigureCommand>
                     <QueryCommand>ACQ:STATE?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="stop" Value="0"/>
                     <Enum Name="run" Value="1"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>stop</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Starts or stops oscilloscope acquisitions.</Description>
            </Property>
            <Property>
               <Name>Timebase</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>HORizontal:MAIn:SCALe</ConfigureCommand>
                     <QueryCommand>HORizontal:MAIn:SCALe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50.0" Min="5.0E-9"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the time per divison for the main time base.</Description>
            </Property>
            <Property>
               <Name>View</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>HORizontal:VIEw</ConfigureCommand>
                     <QueryCommand>HORizontal:VIEw?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="main" Value="MAIN"/>
                     <Enum Name="window" Value="WINdow"/>
                     <Enum Name="zone" Value="ZONE"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Main</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies wether the horizontal display uses the main, window zone, or window view.</Description>
            </Property>
            <Property>
               <Name>WindowDelay</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>HORizontal:DELay:POSition</ConfigureCommand>
                     <QueryCommand>HORizontal:DELay:POSition?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries The window time base horizontal position.</Description>
            </Property>
            <Property>
               <Name>WindowTimebase</Name>
               <Location>acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>HORizontal:DELay:SCALe</ConfigureCommand>
                     <QueryCommand>HORizontal:DELay:SCALe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50.0" Min="5.0E-9"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the time per division for the oscilloscope window time base.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>calibration</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DiagnosticTestStatus</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>DIAG:RESult:FLAg?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="fail" Value="FAIL"/>
                     <Enum Name="pass" Value="PASS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>fail</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the status of the last diagnostic test sequence execution.</Description>
            </Property>
            <Property>
               <Name>Status</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>CALibrate:STATus?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="pass" Value="PASS"/>
                     <Enum Name="fail" Value="FAIL"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>pass</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the status of the last calibration operation performed( either self-or factory -calibration) since power up.</Description>
            </Property>
            <Property>
               <Name>TestSequenceResult</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>DIAg:RESult:LOG?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the internal results log from the last diagnostic test sequence excecution. The list contains all modules and module intefaces that were tested along with the pass/fail status of each.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>abort</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="CALibrate:ABORT" Output="false"/>
                  </Commands>
               </Code>
               <Description>ABORT stops the in-process factory calibration procedure.

INVOKE(obj,'abort') to abort the factory calibration process.

OBJ is a group object.</Description>
            </Method>
            <Method>
               <Name>initialize</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="CALibrate:FACTory" Output="false"/>
                  </Commands>
               </Code>
               <Description>INITIALIZE starts the oscilloscope's internal factory calibration operation.

INVOKE(obj, 'initialize') to start the factory calibration.</Description>
            </Method>
            <Method>
               <Name>proceed</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="CALibrate:CONTINUE" Output="false"/>
                  </Commands>
               </Code>
               <Description>PROCEED Performs the next step in the factory calibration.

INVOKE(obj, 'proceed') for the next step in the factory calibration.</Description>
            </Method>
            <Method>
               <Name>selfcalibrate</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="CALibrate:INTERNAL" Output="false"/>
                  </Commands>
               </Code>
               <Description>SELFCALIBRATE Performs an internal self-calibration.

INVOKE(obj, 'selfcalibrate') to self-calibrate the oscilloscope. This function does not return any status information.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>channel</Name>
         <Description/>
         <Command/>
         <Size>4</Size>
         <Mappings>
            <ChannelMap Command="CH4" Index="4"/>
            <ChannelMap Command="CH3" Index="3"/>
            <ChannelMap Command="CH2" Index="2"/>
            <ChannelMap Command="CH1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BandwidthLimit</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>&lt;ID&gt;:BANDwidth</ConfigureCommand>
                     <QueryCommand>&lt;ID&gt;:BANDwidth?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="ON"/>
                     <Enum Name="off" Value="OFF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the bandwidth setting of the specified oscilloscope channel.

</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>&lt;ID&gt;:COUP</ConfigureCommand>
                     <QueryCommand>&lt;ID&gt;:COUP?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="ac" Value="AC"/>
                     <Enum Name="dc" Value="DC"/>
                     <Enum Name="ground" Value="GND"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>ac</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the vertical gain of the specified oscilloscope channel.</Description>
            </Property>
            <Property>
               <Name>Position</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>&lt;ID&gt;:POSition</ConfigureCommand>
                     <QueryCommand>&lt;ID&gt;:POSition?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the vertical position of the specified oscilloscope channel.  Units are in divisions.  If the channel scale is set to one of the predefined standard (coarse) settings, the Position property is contrained to the known limits (e.g., -400 to 400 divisions at 0.050 V/division).  If the channel scale is at an arbitrary value, e.g. 0.070 V/div, this property us not bounded.  Values outside the acceptable range of the oscilloscope will be constrained by the oscilloscope.
</Description>
            </Property>
            <Property>
               <Name>Probe</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>&lt;ID&gt;:PRObe</ConfigureCommand>
                     <QueryCommand>&lt;ID&gt;:PRObe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>10.0</Value>
                     <Value>100.0</Value>
                     <Value>1000.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the attenuation factor of the specified channel.</Description>
            </Property>
            <Property>
               <Name>Scale</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>&lt;ID&gt;:SCAle</ConfigureCommand>
                     <QueryCommand>&lt;ID&gt;:SCAle?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0.0020</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the vertical gain of the specified oscilloscope channel.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Select:&lt;ID&gt;</ConfigureCommand>
                     <QueryCommand>Select:&lt;ID&gt;?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="off" Value="0"/>
                     <Enum Name="on" Value="1"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable the display of the waveform on the scope.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>cursor</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Cursor1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CursorType</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>CURSor:FUNCtion</ConfigureCommand>
                     <QueryCommand>CURSor:FUNCtion?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="horizontalBars" Value="HBArs"/>
                     <Enum Name="verticalBars" Value="VBArs"/>
                     <Enum Name="none" Value="OFF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>none</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Selects the cursor type.</Description>
            </Property>
            <Property>
               <Name>HorizontalBarDelta</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>CURSor:HBArs:DELTa?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returs the difference (in verticalunits) between the two horizontal bar cursors in the oscilloscope display.</Description>
            </Property>
            <Property>
               <Name>HorizontalBarPosition1</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>CURSor:HBArs:POSITION1</ConfigureCommand>
                     <QueryCommand>CURSor:HBArs:POSITION1?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the first horizontal bar cursor position.</Description>
            </Property>
            <Property>
               <Name>HorizontalBarPosition2</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>CURSor:HBArs:POSITION2</ConfigureCommand>
                     <QueryCommand>CURSor:HBArs:POSITION2?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second horizontal bar cursor position.</Description>
            </Property>
            <Property>
               <Name>HorizontalBarUnits</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>CURSor:HBARS:UNIts?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="volts" Value="VOL"/>
                     <Enum Name="divisions" Value="DIV"/>
                     <Enum Name="decibels" Value="DECIBELS"/>
                     <Enum Name="unknown" Value="UNKNOWN"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>volts</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the vertical scale units for the selected cursor source waveform.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>CURSor:SELect:SOUrce</ConfigureCommand>
                     <QueryCommand>CURSor:SELect:SOUrce?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="channel1" Value="CH1"/>
                     <Enum Name="channel2" Value="CH2"/>
                     <Enum Name="channel3" Value="CH3"/>
                     <Enum Name="channel4" Value="CH4"/>
                     <Enum Name="referenceA" Value="REFA"/>
                     <Enum Name="referenceB" Value="REFB"/>
                     <Enum Name="referenceC" Value="REFC"/>
                     <Enum Name="referenceD" Value="REFD"/>
                     <Enum Name="math" Value="MATH"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Channel1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the waveform that is the source of the vertical and horizontal scale factors used in determining cursor values.</Description>
            </Property>
            <Property>
               <Name>VerticalBarDelta</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>CURSor:VBArs:DELTa?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the time or frequency difference between the two vertical bar cursors.</Description>
            </Property>
            <Property>
               <Name>VerticalBarPosition1</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the device
device = get(obj,'Parent');

%get the interface
interface = get(device,'Interface');

%Tell the instrument you want it to tell you the value
fprintf(interface, 'CURSor:VBArs:POSITION1?');

%retrieve the value from the instrument, and convert it to a double
propertyValue = fscanf(interface,'%f');
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the device
device = get(obj,'Parent');

%get the interface
interface = get(device,'Interface');

%find out what mode its in
fprintf(interface,'HORizontal:VIEw?');
view = deblank(fscanf(interface));

if strncmpi(view,'WINdow',length(view)) ||...
		strncmpi(view,'ZONE',length(view))
	mode = 'DELay';
elseif strncmpi(view,'MAIN',length(view))
	mode = 'MAIn';
else
	error(['Unrecognized view mode. Expected MAIN, WINdow, or ZONE.',...
		' Received ',view]);
end%if/elseif/else

%request the TimeBase (or WindowTimeBase) from the instrument
fprintf(interface,['HORizontal:',mode,':SCALe?']);
timebase = fscanf(interface,'%f');

%request the Delay (or WindowDelay) from the instrument
fprintf(interface,['HORizontal:',mode,':POSition?']);
delay = fscanf(interface,'%f');

%reticule has 10 division, timebase is seconds/division
% range is the seconds across the entire display
range = 10*timebase;

%horizontal cursor positions can range from one side of the display to the
% other, and are measured in seconds
minimum = -1*range/2-delay;
maximum = range/2-delay;

if propertyValue &gt; maximum || propertyValue &lt; minimum
	
	error(['Invalid value for VerticalBarPosition1. ',...
		'Valid values for current Scale and Position settings: ',...
		'a value between ',num2str(minimum),' and ',num2str(maximum)]);
	
end%if propertyValue &gt; maximum || propertyValue &lt; minimum

%set the property to the specified value
fprintf(interface, ['CURSor:VBArs:POSITION1 ', num2str(propertyValue)]);







</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the first vertical bar cursor position.</Description>
            </Property>
            <Property>
               <Name>VerticalBarPosition2</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the device
device = get(obj,'Parent');

%get the interface
interface = get(device,'Interface');

%Tell the instrument you want it to tell you the value
fprintf(interface, 'CURSor:VBArs:POSITION2?');

%retrieve the value from the instrument, and convert it to a double
propertyValue = fscanf(interface,'%f');
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the device
device = get(obj,'Parent');

%get the interface
interface = get(device,'Interface');

%find out what mode its in
fprintf(interface,'HORizontal:VIEw?');
view = deblank(fscanf(interface));

if strncmpi(view,'WINdow',length(view)) ||...
		strncmpi(view,'ZONE',length(view))
	mode = 'DELay';
elseif strncmpi(view,'MAIN',length(view))
	mode = 'MAIn';
else
	error(['Unrecognized view mode. Expected MAIN, WINdow, or ZONE.',...
		' Received ',view]);
end%if/elseif/else

%request the TimeBase (or WindowTimeBase) from the instrument
fprintf(interface,['HORizontal:',mode,':SCALe?']);
timebase = fscanf(interface,'%f');

%request the Delay (or WindowDelay) from the instrument
fprintf(interface,['HORizontal:',mode,':POSition?']);
delay = fscanf(interface,'%f');

%reticule has 10 division, timebase is seconds/division
% range is the seconds across the entire display
range = 10*timebase;

%horizontal cursor positions can range from one side of the display to the
% other, and are measured in seconds
minimum = -1*range/2-delay;
maximum = range/2-delay;

if propertyValue &gt; maximum || propertyValue &lt; minimum
	
	error(['Invalid value for VerticalBarPosition1. ',...
		'Valid values for current Scale and Position settings: ',...
		'a value between ',num2str(minimum),' and ',num2str(maximum)]);
	
end%if propertyValue &gt; maximum || propertyValue &lt; minimum

%set the property to the specified value
fprintf(interface, ['CURSor:VBArs:POSITION2 ', num2str(propertyValue)]);







</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies the second vertical bar cursor position.</Description>
            </Property>
            <Property>
               <Name>VerticalBarUnits</Name>
               <Location>cursor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>CURSor:VBArs:UNIts</ConfigureCommand>
                     <QueryCommand>CURSor:VBArs:UNIts?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="seconds" Value="SECO"/>
                     <Enum Name="hertz" Value="HER"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>seconds</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the units for the vertical bar cursors.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>display</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Contrast</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DISPlay:CONTRast</ConfigureCommand>
                     <QueryCommand>DISPlay:CONTRast?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="100.0" Min="1.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set or query the contast of the LCD display.</Description>
            </Property>
            <Property>
               <Name>Format</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DISPlay:FORMat</ConfigureCommand>
                     <QueryCommand>DISPlay:FORMat?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="xy" Value="XY"/>
                     <Enum Name="yt" Value="YT"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>XY</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the oscilloscope display format.</Description>
            </Property>
            <Property>
               <Name>Persistence</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DIS:PERS</ConfigureCommand>
                     <QueryCommand>DIS:PERS?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>5.0</Value>
                     <Value>0.0</Value>
                     <Value>99.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the length of time that data points are displayed.</Description>
            </Property>
            <Property>
               <Name>Style</Name>
               <Location>display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DISPlay:STYle</ConfigureCommand>
                     <QueryCommand>DISPlay:STYle?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="dots" Value="DOTs"/>
                     <Enum Name="vectors" Value="VECtors"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Dots</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Selects how to display the waveform data.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>measurement</Name>
         <Description/>
         <Command/>
         <Size>6</Size>
         <Mappings>
            <ChannelMap Command="MEAS5" Index="6"/>
            <ChannelMap Command="IMMED" Index="5"/>
            <ChannelMap Command="MEAS4" Index="4"/>
            <ChannelMap Command="MEAS3" Index="3"/>
            <ChannelMap Command="MEAS2" Index="2"/>
            <ChannelMap Command="MEAS1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>MeasurementType</Name>
               <Location>measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>MEASUrement:&lt;ID&gt;:TYPe</ConfigureCommand>
                     <QueryCommand>MEASUrement:&lt;ID&gt;:TYPe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="frequency" Value="FREQ"/>
                     <Enum Name="mean" Value="MEAN"/>
                     <Enum Name="period" Value="PERI"/>
                     <Enum Name="peak2peak" Value="PK2PK"/>
                     <Enum Name="crms" Value="CRM"/>
                     <Enum Name="none" Value="NONE"/>
                     <Enum Name="minimum" Value="MINI"/>
                     <Enum Name="maximum" Value="MAXI"/>
                     <Enum Name="positivewidth" Value="PWIDTH"/>
                     <Enum Name="negativewidth" Value="NWIDTH"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Frequency</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or query the measurement type.  By default this driver supports the standard measurement types of the oscilloscope, and does not include any measurements supported only by expansion modules.  To add additional measurement types supported by your model, edit the driver using midedit.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>MEASU:&lt;ID&gt;:SOUrce</ConfigureCommand>
                     <QueryCommand>MEASU:&lt;ID&gt;:SOUrce?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="channel1" Value="CH1"/>
                     <Enum Name="channel2" Value="CH2"/>
                     <Enum Name="channel3" Value="CH3"/>
                     <Enum Name="channel4" Value="CH4"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>channel1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the source of the measurement.</Description>
            </Property>
            <Property>
               <Name>Units</Name>
               <Location>measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>MEASU:&lt;ID&gt;:UNIts?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="hertz" Value="&#34;Hz&#34;"/>
                     <Enum Name="volts" Value="&#34;V&#34;"/>
                     <Enum Name="seconds" Value="&#34;s&#34;"/>
                     <Enum Name="n/a" Value="&#34;&#34;"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>hertz</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the units for the oscilloscope measurement specified the mesurement type.</Description>
            </Property>
            <Property>
               <Name>Value</Name>
               <Location>measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>MEASU:&lt;ID&gt;:VALue?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the value of a measurement.  If the object is the immediate measurement object (the HwName property is 'IMMED') this property is always valid.  For the standard periodic measurements, it is only a valid valid if the MesesurementType is not 'none'.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>system</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>disablelocalcontrols</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="LOCK ALL" Output="false"/>
                  </Commands>
               </Code>
               <Description>DISABLELOCALCONTROLS Disable all front-panel buttons and knobs.

INVOKE(OBJ, 'disablelocalcontrols') 'unlocks' all front-panel keys and knobs.</Description>
            </Method>
            <Method>
               <Name>enablelocalcontrols</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="LOCK NONe" Output="false"/>
                  </Commands>
               </Code>
               <Description>ENABLELOCALCONTROLS Enable all front-panel buttons and knobs.

INVOKE(OBJ, 'enablelocalcontrols') 'locks' all front-panel keys and knobs.</Description>
            </Method>
            <Method>
               <Name>loadstate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadstate(obj,location)
% OBJ is the group object.
% LOCATION is the specified storage location

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Error checking
    % LOCATION must be a scalar and between 1 and 10, inclusive.
    if ~isnumeric(location) 
        error('LOCATION must be numeric');
    elseif location ~= floor(location)
        error('LOCATION must be a scalar');
    elseif  location &gt;10 || location &lt;1
            error('LOCATION must be between 1 and 10 inclusive');
    end
    
% Send memory name query command
fprintf(interface,['*RCL ' num2str(location)])
</MCode>
               </Code>
               <Description>LOADSTATE  Recall a previously stored state.

INVOKE(OBJ, loadstate, location) restores the state of the oscilloscope from a copy of settings stores in memory.</Description>
            </Method>
            <Method>
               <Name>savestate</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function savestate(obj,location)
% OBJ is the group object.
% LOCATION is the specified storage location

% Get the interface
interface = get(get(obj,'parent'),'interface');

% Error checking
    % LOCATION must be a scalar and between 1 and 10, inclusive.
    if ~isnumeric(location) 
        error('LOCATION must be numeric');
    elseif location ~= floor(location)
        error('LOCATION must be a scalar');
    elseif  location &gt;10 || location &lt;1
            error('LOCATION must be between 1 and 10 inclusive');
    end
    
% Send memory name query command
fprintf(interface,['*SAV ' num2str(location)])
</MCode>
               </Code>
               <Description>SAVESTATE  Save the current state of the oscilloscope.

INVOKE(OBJ,'savestate',location) stores an instrument configuration at the specified memory location, LOCATION.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Coupling</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Main:Edge:Coupling</ConfigureCommand>
                     <QueryCommand>Trigger:Main:Edge:Coupling?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="ac" Value="ac"/>
                     <Enum Name="dc" Value="dc"/>
                     <Enum Name="highFreqRejection" Value="hfrej"/>
                     <Enum Name="lowFreqRejection" Value="lfrej"/>
                     <Enum Name="noiseRejection" Value="noiserej"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>dc</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the type of coupling for the main edge trigger.  This is equivalent to setting Coupling in the Trigger menu.</Description>
            </Property>
            <Property>
               <Name>Holdoff</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Main:Holdoff:Value</ConfigureCommand>
                     <QueryCommand>Trigger:Main:Holdoff?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the oscilloscope's main holdoff value.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get Device Object
deviceObj = get(obj,'Parent');

%get Interface
interface = get(deviceObj,'Interface');

%tell the device you want the value
fprintf(interface,'TRIGGer:MAIN:LEVel?');

%get the value
propertyValue = fscanf(interface,'%f');</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get Device Object
deviceObj = get(obj,'Parent');

%get Interface
interface = get(deviceObj,'Interface');

%get the source
fprintf(interface,'TRIGGer:MAIN:EDGE:SOURce?');
source = deblank(fscanf(interface));

acceptableSources = {'ch1','ch2','ch3','ch4','ext','ext5','line'};
if isempty(strmatch(lower(source),acceptableSources))
	error(['Unexpected value for source. Expect ch1, ch2, ch3, ch4, ext, ext5, or line. Recevied: ',...
		source]);
end%if isempty(strmatch(lower(source),acceptableSource))

%if source is line, ext or ext5, don't check propertyValue
if isempty(strmatch(lower(source),{'ch1','ch2','ch3','ch4'}));
	fprintf(interface,['TRIGGer:MAIN:LEVel ',num2str(propertyValue)]);
end%if ~isempty(strmatch(lower(source),{'ext','ext5'}));


%get the scale
fprintf(interface,[source,':SCAle?']);
scale = fscanf(interface,'%f');

%when source is zeroed, Trigger Level can go to plus or minus 8 times the scale or the source
range = 16*scale;

%get the source's position
fprintf(interface,[source,':POSition?']);
position = fscanf(interface,'%f');

%position is in divs, we need it in volts, scale is volts/div
position = position*scale;

minimum = -1*range/2 - position;
maximum = range/2 - position;

if propertyValue &gt; maximum || propertyValue &lt; minimum
	error(['Invalid value for Level. Valid values: a value from ',...
		num2str(minimum),' to ',num2str(maximum),' (inclusive).']);
end%if propertyValue &gt; maximum || propertyValue &lt; minimum

%set the value
fprintf(interface,['TRIGGer:MAIN:LEVel ',num2str(propertyValue)]);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the oscilloscope main trigger level.  This command is equivalent to adjusting the front-panel TRIGGER LEVEL knob.</Description>
            </Property>
            <Property>
               <Name>Mode</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Main:Mode</ConfigureCommand>
                     <QueryCommand>Trigger:Main:Mode?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="auto" Value="auto"/>
                     <Enum Name="normal" Value="normal"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>normal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the trigger mode for the edge trigger type.</Description>
            </Property>
            <Property>
               <Name>Slope</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Main:Edge:Slope</ConfigureCommand>
                     <QueryCommand>Trigger:Main:Edge:Slope?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="falling" Value="fall"/>
                     <Enum Name="rising" Value="rise"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>rising</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Selects a rising or falling slope for the main edge trigger.  This is equivalent to setting Slope in the Trigger menu.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Main:Edge:Source</ConfigureCommand>
                     <QueryCommand>Trigger:Main:Edge:Source?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="channel1" Value="CH1"/>
                     <Enum Name="channel2" Value="CH2"/>
                     <Enum Name="channel3" Value="CH3"/>
                     <Enum Name="channel4" Value="CH4"/>
                     <Enum Name="external" Value="EXT"/>
                     <Enum Name="external5" Value="EXT5"/>
                     <Enum Name="acline" Value="LINE"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>channel1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets of the source for the main edge trigger.  This is equivalent to setting Source in the Trigger menu.</Description>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>TRIGger:STATE?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="armed" Value="Armed"/>
                     <Enum Name="ready" Value="Ready"/>
                     <Enum Name="trigger" Value="Trigger"/>
                     <Enum Name="auto" Value="Auto"/>
                     <Enum Name="save" Value="Save"/>
                     <Enum Name="scan" Value="Scan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>Armed</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Return the current state of the trigger system.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Main:Type</ConfigureCommand>
                     <QueryCommand>Trigger:Main:Type?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="edge" Value="EDGE"/>
                     <Enum Name="video" Value="VID"/>
                     <Enum Name="pulse" Value="PUL"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>edge</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the type of oscilloscope trigger.  This is equivalent to setting Type in the Trigger menu.</Description>
            </Property>
            <Property>
               <Name>VideoPolarity</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Main:Video:Polarity</ConfigureCommand>
                     <QueryCommand>Trigger:Main:Video:Polarity?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="normal" Value="NORMAL"/>
                     <Enum Name="inverted" Value="INVERT"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>normal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the video trigger polarity.  This is equivalent to selecting Polarity in the Trigger/Video menu.</Description>
            </Property>
            <Property>
               <Name>VideoSource</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Main:Video:Source</ConfigureCommand>
                     <QueryCommand>Trigger:Main:Video:Source?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="channel1" Value="CH1"/>
                     <Enum Name="channel2" Value="CH2"/>
                     <Enum Name="channel3" Value="CH3"/>
                     <Enum Name="channel4" Value="CH4"/>
                     <Enum Name="external" Value="EXT"/>
                     <Enum Name="external5" Value="EXT5"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>channel1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the source for the main video trigger.  This is equivalent to selecting Source in the Video trigger menu.</Description>
            </Property>
            <Property>
               <Name>VideoSync</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Trigger:Main:Video:Sync</ConfigureCommand>
                     <QueryCommand>Trigger:Main:Video:Sync?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="field" Value="field"/>
                     <Enum Name="line" Value="line"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>field</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the source for the video trigger sync.  This is equivalent to selecting Sync in the Trigger/Video menu.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>trigger</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="*TRG" Output="false"/>
                  </Commands>
               </Code>
               <Description>TRIGGER Trigger the instrument.

INVOKE(OBJ,'TRIGGER') performs a Group Execute trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>waveform</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Waveform1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ByteOrder</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>WFMPre:BYT_Or</ConfigureCommand>
                     <QueryCommand>WFMPre:BYT_Or?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="bigEndian" Value="MSB"/>
                     <Enum Name="littleEndian" Value="LSB"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>littleEndian</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries which byte of binary waveform data is transmitted first during a waveform transfer.</Description>
            </Property>
            <Property>
               <Name>EndingPoint</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DATa:STOP</ConfigureCommand>
                     <QueryCommand>DATa:STOP?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="2500.0" Min="1.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the ending point for waveformm data transfers.</Description>
            </Property>
            <Property>
               <Name>FirstPoint</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>DATa:STARt</ConfigureCommand>
                     <QueryCommand>DATa:STARt?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="2500.0" Min="1.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Sets or queries the starting point for waveformm data transfers.</Description>
            </Property>
            <Property>
               <Name>MaxNumberPoint</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>HORizontal:RECordlength?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum number of acqusition data points.</Description>
            </Property>
            <Property>
               <Name>Precision</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Get interface
interface = get(get(obj,'parent'),'interface');
propertyValue = '';

% Set data width 
fprintf(interface,'DATA:WIDTH?')
width = fscanf(interface);

% Remove the newline character at the end of the string
% The same is done for encoding
width(length(width))= '';
width  = str2num(width);

% Check the data format and define propertyValue to the appropriate value
fprintf(interface,'DATA:ENCdg?')
encoding  = fscanf(interface);
encoding(length(encoding)) = '';

% define propertyValue with the right value
if any(strcmpi(encoding,{'RIBinary','SRIbinary'}))
    propertyValue = ['int' num2str(8*width)];
elseif any(strcmpi(encoding,{'RPBinary','SRPbinary'}))
     propertyValue = ['uint' num2str(8*width)];
else propertyValue = 'ascii';
end

</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Get interface
interface = get(get(obj,'parent'),'interface');

% Get the byte order
fprintf(interface,'WFMPre:BYT_Or?')

% Get the order and remove newline character in string
order = fscanf(interface);
order(length(order)) = '';

% Only an S differenciates the two commands(RIBinary and SRIBinary)
% for signed integers. The S will be added to the command if the byte 
% order is LSB
byteOrder ='';
if strcmpi(order,'LSB') == 1
    byteOrder = 'S';
end

% Set the width
if any(strcmpi(propertyValue,{'int8','uint8'}))
    fprintf(interface,['DATA:WIDTH 1'])
elseif any(strcmpi(propertyValue,{'int16','uint16'}))
    fprintf(interface,['DATA:WIDTH 2'])
else
    fprintf(interface,['DATA:WIDTH 1']);
   % error('Invalid format. Valid values are: int8,int16, uint8,uint16.')
end

% Specify format
if strcmpi(propertyValue,'ascii')
    fprintf(interface,['DATA:ENCdg ASCIi'])
    %setting data:enc to ASCII reset Byte_Or to MSB, which is unneccssary.
    %this sets it back to what is was previously.
    fprintf(interface,['WFMPre:BYT_Or ',order]);
elseif any(strcmpi(propertyValue,{'int8','int16'}))
    fprintf(interface,['DATA:ENCdg ' byteOrder 'RIBinary'])
elseif any(strcmpi(propertyValue,{'uint8','uint16'}))
  fprintf(interface,['DATA:ENCdg ' byteOrder 'RPBinary'])
end
    

</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="ascii" Value="ASCIi"/>
                     <Enum Name="int8" Value="int8"/>
                     <Enum Name="int16" Value="int16"/>
                     <Enum Name="uint8" Value="uint8"/>
                     <Enum Name="uint16" Value="uint16"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>ascii</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>readwaveform</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [y, x, yunit, xunit] = readwaveform(obj, source, varargin)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

if (nargout == 0)
    return;
end

scale = true;
y = [];
x = [];
yunit = 'unknown';
xunit = 'unknown';

validValues = {'channel1','channel2','channel3','channel4','referenceA','referenceB','referenceC','referenceD','math'};
scopeValues = {'ch1', 'ch2', 'ch3', 'ch4', 'refa', 'refb', 'refc', 'refd', 'math'};

idx = strmatch(lower(source), {'channel1','channel2','channel3','channel4','referencea','referenceb','math'}, 'exact');

if (isempty(idx))
    error('Invalid SOURCE. CHANNEL must be one of: channel1, channel2, channel3, channel4, referenceA, referenceB, referenceC, referenceD, math');

end

trueSource = scopeValues{idx};

if (nargin &gt; 2)
    try
        scale = logical(varargin{1});
    catch
        error('SCALE must be a logical.');
    end
end

% Get interface
interface = get(get(obj,'parent'),'interface');

oldPrecision = get(obj, 'Precision');
oldByteOrder = get(obj, 'ByteOrder');

set(obj, 'Precision', 'int16');
set(obj, 'ByteOrder', 'littleEndian');

try 
    % Specify source
    fprintf(interface,['DATA:SOURCE ' trueSource]);

    % Issue the curve transfer command.
    fprintf(interface, 'CURVE?');

    raw = binblockread(interface, 'int16');

    % Tektronix scopes send and extra terminator after the binblock.
    fread(interface, 1);
catch
    set(obj, 'Precision', oldPrecision);
    set(obj, 'ByteOrder', oldByteOrder);
    error(lasterr);
end

if (isempty(raw))
    set(obj, 'Precision', oldPrecision);
    set(obj, 'ByteOrder', oldByteOrder);
    error('An error occurred while reading the waveform.');
end

if (scale == false)
    y = raw;
    if (nargout &lt; 2)
        set(obj, 'Precision', oldPrecision);
        set(obj, 'ByteOrder', oldByteOrder);
        return;
    end
    ptcnt = str2num(query(interface, 'WFMPRE:NR_PT?'));
    x = 1:ptcnt;
    
    if (nargout &gt; 2)
        xunit = query(interface, 'WFMPRE:XUnit?');
        xunit(xunit == '"') = [];
        yunit = query(interface, 'WFMPRE:YUnit?');
        yunit(yunit == '"') = [];
    end
else
    yoffs = str2num(query(interface, 'WFMPRE:YOFF?'));
    ymult = str2num(query(interface, 'WFMPRE:YMULT?'));
    yzero = str2num(query(interface, 'WFMPRE:YZERO?'));
    y = ((raw - yoffs) .* ymult) + yzero;
    if (nargout &lt; 2)
        set(obj, 'Precision', oldPrecision);
        set(obj, 'ByteOrder', oldByteOrder);
        return;
    end
    xzero = str2num(query(interface, 'WFMPRE:XZERO?'));
    xincr = str2num(query(interface, 'WFMPRE:XINCR?'));
    ptcnt = str2num(query(interface, 'WFMPRE:NR_PT?'));
    x = (((0:(ptcnt-1)) .* xincr) + xzero);
    
    if (nargout &gt; 2)
        xunit = query(interface, 'WFMPRE:XUnit?');
        xunit(xunit == '"') = [];
        yunit = query(interface, 'WFMPRE:YUnit?');
        yunit(yunit == '"') = [];
    end
end
y = y';

set(obj, 'Precision', oldPrecision);
set(obj, 'ByteOrder', oldByteOrder);
</MCode>
               </Code>
               <Description>READWAVEFORM Transfer waveforms from the oscilloscope to MATLAB.

[Y, T] = INVOKE(obj, 'readwaveform', CHANNEL) returns a waveform from the instrument,
using channel string, CHANNEL.  Valid channel values are channel&lt;x&gt;, reference&lt;y&gt;, and
math, where &lt;x&gt; is a number between 1 and the number of channels on the instrument and &lt;y&gt; is a letter between A and the number of reference channels on the instrument.

[Y, T] = INVOKE(obj, 'readwaveform', CHANNEL, SCALE) returns the data scaled to real units if SCALE is true, or as raw data if SCALE is false.

To read the waveform data points the interface object associated with the device
object must have a sufficiently large InputBufferSize property value.  If you receive
an error about the buffer size being to small, or have difficulty reading a waveform,
verify that it is large enough.  The size must be greater than two times the number
of points in the waveform, plus approximately 50 bytes for header information.

Example:
	[y, t] = invoke(obj, 'readwaveform', 'channel1');
	[y, t] = invoke(obj, 'readwaveform', 'referenceA', false);

Example changing the buffer size:
	% Note the device object must be closed.
	interfaceObj = get(deviceObj, 'interface');
	% Allow for a 10,000 point waveform with a little extra room.
	set(interfaceObj, 'InputBufferSize', 21000);
	connect(deviceObj);
	[y, t] = invoke(obj, 'readwaveform', 'channel1');




</Description>
            </Method>
            <Method>
               <Name>storewaveform</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function storewaveform(obj, channel, location)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

idx = strmatch(lower(channel), {'channel1', 'channel2', 'channel3', 'channel4'}, 'exact');

if (isempty(idx))
    error('CHANNEL must be ''channel1'', ''channel2'', ''channel3'', or ''channel4''');
end

idx = strmatch(lower(location), {'referencea', 'referenceb','referencec', 'referenced'}, 'exact');

if (isempty(idx))
    error('LOCATION must be ''referencea'', ''referenceb'',''referencec'', or ''referenced''');
end

source = ['CH' channel(end)];
dest = ['REF' location(end)];

% Get interface
interface = get(get(obj,'parent'),'interface');

fprintf(interface, ['SAVe:WAVEform ' source ', ' dest]);</MCode>
               </Code>
               <Description>STOREWAVEFORM Save a waveform to oscilloscope memory.

INVOKE(OBJ, 'storewaveform', CHANNEL, LOCATION) saves the waveform from CHANNEL to memory location, LOCATION.
</Description>
            </Method>
            <Method>
               <Name>writewaveform</Name>
               <Location>waveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function writewaveform(obj, datapoints, destination)

% Validate destination
if ~any(strcmpi(destination, {'referencea', 'referenceb','referencec','referenced'}))
    error('DESINATION must be ''referencea'', ''referenceb'',''referencec'', or ''referenced''');
end

% Check that the array contains only numeric data
if ~isnumeric(datapoints) || length(size(datapoints)) &gt; 2 || min(size(datapoints)) &gt; 1
    error('DATA must be a 1 x n numeric array');
end

if (numel(datapoints) &gt; 2500)
    error('DATA must be less than 2500 points');
end
    
oldPrecision = get(obj, 'Precision');
set(obj, 'Precision', 'int16');

%Get interface
interface = get(get(obj,'parent'),'interface');

try
    fprintf(inteface,['DATA:DESTination REF' destination(end)]);
    fprintf(interface,['CURVe ' data]);
    binblockwrite(interface, datapoints, 'int16');
catch
end

set(obj, 'Precision', oldPrecision);</MCode>
               </Code>
               <Description>writeWAVEFORM Transfer waveforms in the oscilloscope.

INVOKE(OBJ, 'writewaveform', POINTS) downloads the numeric data POINTS to the oscilloscope. 

Warning: This operation can be very slow on TDS-200 series oscillscopes.
</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>